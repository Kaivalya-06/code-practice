package Trees;

import java.util.Scanner;

public class BinarySearchTree 
{
	Scanner sc = new Scanner(System.in);	
	public class Node{
		Node left;
		Node right;
		int data;
		
	}
	
	Node Root = null;
	
	public Node initTree(int val)
	{
		Node newNode = new Node();
		newNode.data = val;
		newNode.left = null;
		newNode.right = null;
		return newNode;
	}//create node
	
	public void addNode(int val)
	{
		Node newNode = initTree(val);
		
		if(Root == null)
			Root = newNode;
		
		else if(Root != null)
		{
			Node temp = Root;
			while(true)
			{
				if(val < temp.data)
				{
					if(temp.left == null)
					{
						temp.left = newNode;
						System.out.println("Enterd Data "+temp.data);
						break;
					}
					else
						temp= temp.left;
				}
				
				else if(val > temp.data)
				{
					if(temp.right == null)
					{
						temp.right = newNode;
						break;
					}
					else
						temp = temp.right;
				}
				else {
					System.out.println("Duplicates Not Allowed.......");
				}
			}
		}
		
	}//Add Node
	
	
	public void pre_Order(Node newNode)
	{
//		Root = newNode;
//		if(Root != null && Root.right != null) 
//		{
//			System.out.println(" "+Root.data+" ");
//			pre_Order(Root.left);
//			pre_Order(Root.right);
//	}
			if(newNode == null)
				return;
			System.out.println(newNode.data);
			pre_Order(newNode.left);
			pre_Order(newNode.right);
		
	}//pre Order
	
	public void in_Order(Node newNode)
	{
//		if(Root != null)
//		{
//			in_Order(Root.left);
//			System.out.println(" "+Root.data+" ");
//			in_Order(Root.right);
//		}
		
		if(newNode == null)
			return;
		pre_Order(newNode.left);
		System.out.println(newNode.data);	
		pre_Order(newNode.right);	
	}//in Order
	
	public void post_Order(Node newNode)
	{
//		if(Root != null)
//		{
//			post_Order(Root.left);
//			post_Order(Root.right);
//			System.out.println(" "+Root.data+" ");
//		}
		
		pre_Order(newNode.left);
		pre_Order(newNode.right);
		System.out.println(newNode.data);
		
		
	}//post Order
	
	
	public int degreeOfNode(int data) 
	{
		int degree=0;
		//Node temp=root;
		
		Node newnode=Search(data, Root);
		if(newnode==null) {
			return -1;
		}
		if(newnode!=null) {
			if(newnode.left!=null) 
			{
				degree++;
			}
			if(newnode.right!=null) 
			{
				degree++;
			}
		}
		return degree;
	}
	
	public Node Search(int data,Node root) {
		if(root==null || data==root.data) {
			return root;
		}
		 
			if(data<root.data) {
				return Search(data, root.left);
			}else {
				return Search(data, root.right);
			}
			
		}


	public static void main(String[] args) 
	{
		
		Scanner sc = new Scanner(System.in);
		
		BinarySearchTree bst = new BinarySearchTree();
		int choice = 0;
		
		
		do {
			System.out.println("\n\t---------- MENU ----------"+
					"\n\t 0-> Exit."+
					"\n\t 1-> Add Node."+
					"\n\t 2-> Pre  Order."+
					"\n\t 3-> In   Order."+
					"\n\t 4-> Post Order."+
					"\n\t 5-> Degree Of Node.");
			System.out.println("\nEnter Your Choice\n");
			choice = sc.nextInt();
			switch (choice) {
			case 0:
					System.out.println("Exiting The Program !!!");
					System.exit(0);
					break;
			case 1:
					System.out.println("Enter The Value :: ");
					bst.addNode(sc.nextInt());
					break;
			case 2:
					System.out.println("----------Pre Order----------");
					bst.pre_Order(bst.Root);
					System.out.println("------------------------------");
					break;
			case 3:
					System.out.println("----------In Order----------");
					bst.in_Order(bst.Root);
					System.out.println("-----------------------------");
					break;
			case 4:
					System.out.println("----------Post Order----------");
					bst.post_Order(bst.Root);
					System.out.println("-------------------------------");
					break;
			case 5:
					System.out.println("Enter the Node Who's Degree You Want to Find :: ");
					System.out.println(bst.degreeOfNode(sc.nextInt()));
					break;
			}
		} while (choice != 0);
		
		
	}

}

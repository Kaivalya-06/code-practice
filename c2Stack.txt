package StackPackage;

import java.util.Scanner;

public class C2Stack 
{
	Scanner sc = new Scanner(System.in);
	
	private int size;
	private int top1;
	private int top2;
	private int[] stk;
	
	public C2Stack()
	{
		size = 0;
		top1 = -1;
		top2 = size;
		stk = new int[size];
	}
	
	public void initializeStack() 
	{
		System.out.println("Enter the size of Stack :: ");
		size = sc.nextInt();
		stk = new int[size];
		top1 = -1;
		top2 = size;
	}//initialize stack
	
	/*-------------------------------------------*/
	
	public boolean is_Full()
	{
		if(top2 == top1+1)
			return true;
		else
			return false;
	}//is full
	
	/*-------------------------------------------------*/
	
	public boolean is_Empty()
	{
		if(top2 == size && top1 == -1)
			return true;
		else
			return false;
	}//is empty
	
	/*--------------------------------------------------*/
	
	public void push1(int val)
	{
		if(!is_Full())
		{
			top1++;
			stk[top1]=val;
		}
	}//push 1
	
	/*---------------------------------------------------*/
	
	public void push2(int val)
	{
		if(!is_Full())
		{
			top2++;
			stk[top2] = val;				
		}
	}//push 2
	
	/*------------------------------------------------------*/
	
	public int pop1()
	{
		int val = -1;
		if(!is_Empty()&& top1 == -1)
		{
			val = stk[top1];
			top1--;
		}
		else
			System.out.println("Stack is Empty......");
		return val;
	}//pop 1
	
	/*--------------------------------------------------------*/
	
	public int pop2()
	{
		int val = -1;
		if(!is_Empty() && top2 == size)
			val = stk[top2];
		else
			System.out.println("Stack is Empty.......");
		return val;
	}//pop 2
	
	/*------------------------------------------------------*/
	
	public void display()
	{
		if(!is_Empty())
		{
			for(int i = top1 ;i>-1;i--)
				System.out.println(stk[i]);
			for(int i = top2;i<size;i++)
				System.out.println(stk[i]);
		}
		else
			System.out.println("Empty...........");
	}
	

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		C2Stack c2s = new C2Stack();
		int choice = 0;
		
		do {
			System.out.println("\n\t...........MENU............\n"
					+			"\n\t 1-> Initialize."
					+			"\n\t 2-> Push 1."
					+			"\n\t 3-> Push 2."
					+			"\n\t 4-> Pop 1."
					+			"\n\t 5-> Pop 2."
					+			"\n\t 6-> Display.");
			
			switch(choice)
			{
			case 0:
					System.out.println("Exiting The Program.......");
					System.exit(0);
					break;
			case 1:
					System.out.println("Initializing The Stack. ");
					c2s.initializeStack();
					break;
			case 2: System.out.println("Pushing In Stack 1 :: ");
					c2s.push1(sc.nextInt());
					break;
			case 3: System.out.println("Pushing In Stack 2 :: ");
					c2s.push2(sc.nextInt());
					break;
			case 4: System.out.println("Poping Element from Stack 1 :: "+c2s.pop1());
					break;
			case 5: System.out.println("Poping Element from Stack 2 :: "+c2s.pop2());
					break;
			case 6: c2s.display();
					break;
			}
		}while(choice != 0);
		
	}

}
